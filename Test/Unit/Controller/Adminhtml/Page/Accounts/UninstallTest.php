<?php


namespace SalesAndOrders\FeedTool\Test\Unit\Controller\Adminhtml\Page\Accounts;

use Magento\Framework\View\Result\PageFactory;
use PHPUnit\Framework\TestCase;
use SalesAndOrders\FeedTool\Controller\Adminhtml\Page\Accounts\Uninstall;
use \Magento\Framework\App\Action\Context;
use \Magento\Framework\Controller\Result\JsonFactory;
use SalesAndOrders\FeedTool\Model\ResourceModel\WebHook;

/**
 * Comment is required here
 */
class UninstallTest extends TestCase
{

    protected $resultJsonFactory;

    protected $resultPageFactory;

    protected $resultLayoutFactory;

    protected $webHookModel;

    protected $resultFactoryMock;

    protected $resultFactory;

    protected $context;

    protected $jsonMock;

    protected $request;

    protected $object;

    protected $resultInteface;

    protected $redirectInterface;

    protected $redirect;

    protected function setUp()
    {
        $this->context = $this->createMock(Context::class);
        $this->resultJsonFactory = $this->createMock(JsonFactory::class);
        $this->resultPageFactory = $this->createMock(PageFactory::class);
        $this->webHookModel = $this->createMock(WebHook::class);

        $this->resultFactoryMock = $this->getMockBuilder(\Magento\Framework\Controller\ResultFactory::class)
            ->setMethods(['create', 'setData'])
            ->disableOriginalConstructor()
            ->getMock();

        $this->resultFactory = $this->context->expects($this->any())->method('getResultFactory')
            ->will($this->returnValue($this->resultFactoryMock));

        $this->jsonMock = $this->createMock(\Magento\Framework\Controller\Result\Json::class);

        $this->request = $this->createMock(\Magento\Framework\App\RequestInterface::class);

        $this->resultInteface = $this->getMockBuilder(\Magento\Framework\Controller\ResultInterface::class)
            ->setMethods(['setUrl'])
            ->disableOriginalConstructor()
            ->getMockForAbstractClass();

        $this->redirectInterface = $this->getMockBuilder(\Magento\Framework\App\Response\RedirectInterface::class)
            ->setMethods(['getRefererUrl'])
            ->disableOriginalConstructor()
            ->getMockForAbstractClass();

        $this->redirect = $this->context->expects($this->any())->method('getRedirect')
            ->will($this->returnValue($this->redirectInterface));

        $this->object = $this->getMockBuilder(
            Uninstall::class
        )
            ->setMethods(
                [
                'getRequest'
                ]
            )
            ->setConstructorArgs(
                [
                    $this->context,
                    $this->resultJsonFactory,
                    $this->resultPageFactory,
                    $this->webHookModel,
                    $this->resultFactoryMock
                ]
            )
            ->getMock();

        parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function testExecute()
    {
        $this->resultJsonFactory->expects($this->any())->method('create')
            ->will($this->returnValue($this->jsonMock));

        $this->object->expects($this->any())->method('getRequest')
            ->will($this->returnValue($this->request));
        $this->request->expects($this->any())->method('getParam')
            ->with('store_code')->will($this->returnValue('some_code'));
        $this->webHookModel->expects($this->any())->method('uninstall')->with('some_code')
            ->will($this->returnValue(true));
        $this->resultFactoryMock->expects($this->any())->method('create')
            ->with('redirect')->will($this->returnValue($this->resultInteface));

        $this->redirectInterface->expects($this->any())->method('getRefererUrl')->will($this->returnValue('url'));

        $this->resultInteface->expects($this->any())
            ->method('setUrl')->will($this->returnSelf());

        $this->assertSame($this->resultInteface, $this->object->execute());
    }
}
